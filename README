Normal usage: Edit CollectRCUdata.sh to add the new version, then
	      invoke AnalyzeRCU.sh.

AnalyzeRCU.sh

	The main script.  Invoke this -within- -this- -directory- to
	collect a full set of RCU and locking data for a bunch of kernel
	versions, putting the result in ../linuxusage (edit the script to
	change it).  Be warned that this will download a bunch of kernel
	source trees, so you might want to avoid using this script over
	slow dialup lines.

	Edit the file CollectRCUdata.sh to select the subset of the
	kernels for which you wish to collect data.  (Sorry, only
	minor releases such as 2.6.24 are recognized at present.)
	This is useful if you have run this on prior kernels and a new
	release comes out.  The script will add the new data to the
	old, regenerating the plots and web pages.  (But I would still
	recommmend backing up your old data before letting the script
	loose on it!!!)

	This script generates .date, .lockwc, .rcua, .sum, and
	.wc files for each kernel version specified.  For example,
	for 2.6.0, it generates:

		linux-2.6.0.date	Date on kernel.org's .tar.bz2 file
		linux-2.6.0.lockwc	Count of lock operations
		linux-2.6.0.rcua	cscope listing of RCU API uses
		linux-2.6.0.sum		Count of RCU API uses by subtree
		linux-2.6.0.wc		Count of RCU API uses

	No, I do -not- generate a cscope listing of locking API uses,
	given that it would weigh in at 40,000 lines.  If you -really-
	want such a thing, you can easily create it yourself.  ;-)

	In addition, it appends a line of the form "<decimal date> <count>"
	to each of lock.dat and rcu.dat, with the count of locking and
	RCU API uses, respectively.  The line generated for 2.6.0 in
	rcu.dat is as follows:

		2003.965 180

	where 2003.965 corresponds to December 18th of that year.

	It also appends an HTML table row to rculock.tab, and regenerates
	rculocktab.html on each run.

	Finally, it invokes plots.sh to generate three plots, in each
	of .eps, .png, and .pbm formats.  These contain plots of data
	as follows:

		linux-RCU.*		Plot of RCU API usage over time
		linux-RCUlock.*		Ditto, but also include locking
		linux-RCUlocklog.*	Ditto, but logscale y-axis

	There is no sorting step here -- it is up to you to run the
	data-collection runs in the order you desire.  After all,
	you might be interested in a different order than am I!

	Most of the other scripts are invoked either directly or
	indirectly by this one as follows:

	CollectRCUdata.sh
		LinuxRCUcount.sh
			RCUanalysis.sh
				SRCUcommon.sh
				Non-SRCUcommon.sh
			summarizecscope.sh
			SRCUanalysis.sh
				SRCUcommon.sh
			Non-SRCUanalysis.sh
				Non-SRCUcommon.sh
			LockAnalysis.sh
				RWlockSpinCommon.sh
				RWlockSleepCommon.sh
			RWlockAnalysis.sh
				RWlockSpinCommon.sh
				RWlockSleepCommon.sh
			RWspinlockAnalysis.sh
				RWlockSpinCommon.sh
			RWsleeplockAnalysis.sh
				RWlockSleepCommon.sh
			date2frac.sh
			version2date.sh
				version2date.awk
	plots.sh

AnalyzeRCUtest.sh

	Test script for CollectRCUdata.sh and plots.sh.

CollectDiffs.sh

	Experimental script, not part of the normal run.  Does a
	differential profiling run comparing the number of instances
	of RCU APIs in the various subdirectories of the kernel source
	tree.  Uses sumdiff.sh for the actual differential profiling.

CollectRCUdata.sh

	Collects data on a bunch of kernel versions, as called
	out in the script.  Takes the directory in which to place
	the data as its sole optional argument (defaulting to
	~/paper/RCU/intro/linuxusage).

COPYING

	Your very own copy of GPL to add to your collection.  Yes, this
	software is licensed under GPL and is made available as a tool
	to analyze and validate the kernel.

date2frac.sh

	Script that converts dates to decimal year, so that "18-Dec-2003"
	becomes "2003.965".  Put the date as the first argument to the
	script, the decimal is printed on standard output.  Very crude,
	assumes 31 days in each month.	There actually was an old CACM
	article sometime in the 60s that had a simple integer-arithmetic
	formula to convert month-day-year into a day number, but I once
	again was lazy.  Besides, the error from my cheap-shot approach
	is too small to be visible.

findkorgdates.sh

	Pull down early Linux-kernel directories from kernel.org and
	create an awk array mapping release to release date.  This was
	run manually and generated version2date.awk, which is used on
	a regular basis by version2date.sh.

LinuxRCUcount.sh

	Ths is the "workhorse" of the data collection process.  For
	the specified version (and optional destination directory),
	it downloads the kernel source tree, unpacks it, builds a
	cscope database on it, and invokes the LockAnalysis.sh and
	RCUanalysis.sh scripts to collect the respective data.
	It then appends data to the .dat files, the rculock.tab file,
	and finally regenerates the plots and the rculocktab.html file.

LockAnalysis.sh

	A script of cscope queries to gather data on locking.
	Queries pertaining to reader-writer locking are delagated to
	RWlockSpinCommon.sh and RWlockSleepCommon.sh.

lsdate2frac.sh

	Converts "ls -l" format dates to approximate decimal year,
	in a manner similar to date2frac.sh.  Currently unused.

MBanalysis.sh

	Issues cscope queries to gather data on memory-barrier primitives.

Non-SRCUanalysis.sh

	Issues cscope queries to gather data on non-SRCU SRCU APIs by
	virtue of invoking Non-SRCUcommon.sh.

Non-SRCUcommon.sh

	Issues cscope queries to gather data on RCU.

PaulFracRCU.sh

	Given an output directory and a list of git tags, produces plots
	of the percentage of RCU commits from paulmck and of the numbers
	of paulmck and non-paulmck commits.

plots.sh

	Invokes "gnuplot" and "convert" to produce the plots.

RCUanalysis.sh

	A script of cscope queries to gather data on RCU, delegating
	the actual querying to SRCUcommon.sh and Non-SRCUcommon.sh.

RCUAPImembers.sh

	Form a shell variable "api" enumerating all past and current
	RCU API members.  Contains a very outdated list of RCU API
	members.

RCUAPImembers2awk.sh

	Create a series of awk statements mapping RCU APIs to Linux-kernel
	versions.  The awk statements that this script produces are passed
	(by you) into RCUAPImembersplot.sh and RCUAPImemberstab.sh.
	The list of APIs is obtained from RCUAPImembers.sh.

	This script is outdated in that it ignores the v4.x and later
	versions of the kernel.

RCUAPImembersplot.sh

	Using awk statements generated by RCUAPImembers2awk.sh, plot the
	number of RCU API members as a function of time.

RCUAPImemberstab.sh

	Using awk statements generated by RCUAPImembers2awk.sh, produce
	HTML and LaTeX tables showing the number of RCU API members as
	a function of time.

RCUbhanalysis.sh

	Issues cscope queries to gather data on RCU-bh.  Outdated.

RCUbySubsystem.sh

	A script that you run in the top-level directory of a Linux-kernel
	source tree, giving it a .sum file as input.  It produces LaTeX
	table entries showing RCU use and use per KLoC, for example,
	as follows:

		ipc & 97 & 9,911 &  9.79 \\
		virt & 75 & 10,649 &  7.04 \\
		net & 8,083 & 1,296,232 &  6.24 \\
		security & 620 & 120,071 &  5.16 \\
		kernel & 2,193 & 511,033 &  4.29 \\
		rust & 3 & 1,069 &  2.81 \\
		io_uring & 63 & 23,490 &  2.68 \\
		mm & 473 & 205,614 &  2.30 \\
		lib & 480 & 251,681 &  1.91 \\
		block & 110 & 69,854 &  1.57 \\
		init & 7 & 4,550 &  1.54 \\
		fs & 1,921 & 1,668,078 &  1.15 \\
		include & 1,037 & 1,352,768 &  0.77 \\
		arch & 634 & 2,174,312 &  0.29 \\
		drivers & 6,943 & 24,841,991 &  0.28 \\
		crypto & 6 & 110,891 &  0.05 \\
		sound & 21 & 1,584,416 &  0.01 \\
		Total & 22,766 & 34,236,610 &  0.66 \\

README

	You are reading it!

RWlockAnalysis.sh

	A script of cscope queries to gather data on reader-writer locks,
	with the actual querying delegated to RWlockSpinCommon.sh and
	RWlockSleepCommon.sh.

RWlockSleepCommon.sh

	A script of unreduced cscope queries to gather data on
	reader-writer sleeplocks.

RWlockSpinCommon.sh

	A script of unreduced cscope queries to gather data on
	reader-writer spinlocks.

RWsleeplockAnalysis.sh

	A script of cscope queries to gather data on reader-writer
	semaphores, delegating the actual querying to
	RWlockSleepCommon.sh.

RWspinlockAnalysis.sh

	A script of csscope queries to gather data on reader-writer
	spinlocks, delegating the actual querying to RWlockSpinCommon.sh.

SeqlockAnalysis.sh

	A script of cscope queries to gather data on seqlocks.	Not used
	except manually, and probably outdated.

SleeplockAnalysis.sh

	A script of cscope queries to gather data on semaphores.
	(Not used except manually, obsoleted by LockAnalysis.sh.)

SpinlockAnalysis.sh

	A script of cscope queries to gather data on spinlocks.
	(Not used except manually, obsoleted by LockAnalysis.sh.)

sumdiff.sh

	Does differential profiling on the specified pair of .sum files.

summarizecscope.sh

	Takes a cscope listing (such as that produced by RCUanalysis.sh)
	on standard input and produces a per-subtree summarized list
	(such as that found in the .sum files at the end of a run).

version2date.awk

	Contains awk code to create an associative array mapping
	Linux-kernel versions to their release dates.

version2date.sh

	Converts a Linux-kernel version to its release date, using the
	code in version2date.awk.
